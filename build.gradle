buildscript {
    repositories {
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
        classpath 'org.openjfx:javafx-plugin:0.0.10'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.5.6'
    }
}

configure(rootProject) {

    // remove the 'bisq-*' scripts and 'lib' dir generated by the 'installDist' task
    task clean {
        doLast {
            delete fileTree(dir: rootProject.projectDir, include: 'bisq-*'), 'lib'
        }
    }
}

configure(subprojects) {
    apply plugin: 'java'
    apply plugin: 'com.google.osdetector'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    ext { // in alphabetical order
        bcVersion = '1.63'
        bitcoinjVersion = '42bbae9'
        codecVersion = '1.13'
        cowwocVersion = '1.2'
        easybindVersion = '1.0.3'
        easyVersion = '4.0.1'
        findbugsVersion = '3.0.2'
        firebaseVersion = '6.2.0'
        fontawesomefxVersion = '8.0.0'
        fontawesomefxCommonsVersion = '9.1.2'
        fontawesomefxMaterialdesignfontVersion = '2.0.26-9.1.2'
        grpcVersion = '1.42.1'
        gsonVersion = '2.8.5'
        guavaVersion = '30.1.1-jre'
        guiceVersion = '5.0.1'
        hamcrestVersion = '1.3'
        httpclientVersion = '4.5.12'
        httpcoreVersion = '4.4.13'
        ioVersion = '2.6'
        jacksonVersion = '2.12.1'
        javafxVersion = '16'
        javaxAnnotationVersion = '1.2'
        jcsvVersion = '1.4.0'
        jerseyVersion = '3.0.4'
        jetbrainsAnnotationsVersion = '13.0'
        jfoenixVersion = '9.0.10'
        joptVersion = '5.0.4'
        jsonsimpleVersion = '1.1.1'
        jsonrpc4jVersion = '1.6.0.bisq.1'
        junitVersion = '4.12'
        jupiterVersion = '5.7.0'
        kotlinVersion = '1.3.41'
        knowmXchangeVersion = '5.0.13'
        langVersion = '3.11'
        logbackVersion = '1.1.11'
        loggingVersion = '1.2'
        lombokVersion = '1.18.22'
        mockitoVersion = '4.0.0'
        netlayerVersion = '0.7.4'
        protobufVersion = '3.19.1'
        protocVersion = protobufVersion
        pushyVersion = '0.13.2'
        qrgenVersion = '1.3'
        slf4jVersion = '1.7.30'
        sparkVersion = '2.5.2'
        springBootVersion = '2.5.6'
        swaggerVersion = '2.2.0'

        os = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
    }

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        testImplementation "junit:junit:$junitVersion"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}


configure([project(':pricenode')]) {

    apply plugin: 'application'

    build.dependsOn installDist
    installDist.destinationDir = file('build/app')
    distZip.enabled = false

    // the 'installDist' and 'startScripts' blocks below configure bisq executables to put
    // generated shell scripts in the root project directory, such that users can easily
    // discover and invoke e.g. ./bisq-desktop, ./bisq-seednode, etc.
    // See https://stackoverflow.com/q/46327736 for details.

    installDist {
        doLast {
            // copy generated shell scripts, e.g. `bisq-desktop` directly to the project
            // root directory for discoverability and ease of use

            copy {
                from "$destinationDir/bin"
                into rootProject.projectDir
            }
            // copy libs required for generated shell script classpaths to 'lib' dir under
            // the project root directory
            copy {
                from "$destinationDir/lib"
                into "${rootProject.projectDir}/lib"
            }

            // edit generated shell scripts such that they expect to be executed in the
            // project root dir as opposed to a 'bin' subdirectory
            def windowsScriptFile = file("${rootProject.projectDir}/bisq-${applicationName}.bat")
            windowsScriptFile.text = windowsScriptFile.text.replace(
                'set APP_HOME=%DIRNAME%..', 'set APP_HOME=%DIRNAME%')

            def unixScriptFile = file("${rootProject.projectDir}/bisq-$applicationName")
            unixScriptFile.text = unixScriptFile.text.replace(
                'APP_HOME=$( cd "${APP_HOME:-./}.." && pwd -P ) || exit', 'APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit')

            if (applicationName == 'desktop') {
                def script = file("${rootProject.projectDir}/bisq-$applicationName")
                script.text = script.text.replace(
                    'DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-XX:MaxRAM=8g -Xss1280k -XX:+UseG1GC ' +
                    '-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5 -XX:+UseStringDeduplication ' +
                    '-Djava.net.preferIPv4Stack=true"')
            }

            if (applicationName == 'apitest') {
                // Pass the logback config file as a system property to avoid chatty
                // logback startup due to multiple logback.xml files in the classpath
                // (:daemon & :cli).
                def script = file("${rootProject.projectDir}/bisq-$applicationName")
                script.text = script.text.replace(
                    'DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="' +
                    '-Dlogback.configurationFile=apitest/build/resources/main/logback.xml"')
            }

            if (osdetector.os != 'windows')
                delete fileTree(dir: rootProject.projectDir, include: 'bisq-*.bat')
            else
                delete fileTree(dir: rootProject.projectDir, include: 'bisq-*', exclude: '*.bat')
        }
    }

    startScripts {
        // rename scripts from, e.g. `desktop` to `bisq-desktop`
        applicationName = "bisq-$applicationName"
    }
}

configure(project(':pricenode')) {
    apply plugin: "org.springframework.boot"

    apply plugin: 'io.spring.dependency-management'

    mainClassName = 'bisq.price.Main'

    version = file("src/main/resources/version.txt").text.trim()

    jar.manifest.attributes(
        "Implementation-Title": project.name,
        "Implementation-Version": version)

    ext['log4j2.version'] = '2.17.0'

    dependencies {
        implementation("bisq:common")
        implementation("bisq:core")
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        implementation "com.google.code.gson:gson:$gsonVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        implementation "commons-codec:commons-codec:$codecVersion"
        implementation "org.apache.httpcomponents:httpcore:$httpcoreVersion"
        implementation("org.apache.httpcomponents:httpclient:$httpclientVersion") {
            exclude(module: 'commons-codec')
        }
        implementation("org.knowm.xchange:xchange-binance:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-bitbay:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-bitfinex:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-bitflyer:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-bitstamp:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-btcmarkets:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-cexio:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-coinbasepro:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-coinmarketcap:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-coinmate:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-coinone:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-exmo:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-hitbtc:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-huobi:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-independentreserve:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-kraken:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-luno:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-mercadobitcoin:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-paribu:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-poloniex:$knowmXchangeVersion")
        implementation("org.knowm.xchange:xchange-quoine:$knowmXchangeVersion")
        implementation("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$jupiterVersion"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$jupiterVersion")
    }

    test {
        useJUnitPlatform()

        // Disabled by default, since spot provider tests include connections to external API endpoints
        // Can be enabled by adding -Dtest.pricenode.includeSpotProviderTests=true to the gradle command:
        // ./gradlew test -Dtest.pricenode.includeSpotProviderTests=true
        if (System.properties['test.pricenode.includeSpotProviderTests'] != 'true') {
            project.logger.lifecycle('Pricenode: Skipping spot provider tests')
            exclude 'bisq/price/spot/providers/**'
        }
    }

    task stage {
        dependsOn assemble
    }
}
